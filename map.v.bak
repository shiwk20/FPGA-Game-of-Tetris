module map(
    input CLK_25M,
    input CLK_1, 
    
    input [3:0] cur_coordX [3:0],
    input [4:0] cur_coordY [3:0],
    input [2:0] cur_type,
    input [9:0] X,
    input [9:0] Y,
    input key_reset,
    input key_start,
    input key_pause,

    output reg Update,
    output reg Over,
    output reg Start,
    output reg [2:0] IsMap


);

initial begin
    Over = 1'b0;
    Start = 1'b0;
    Update = 1'b0;
end

//map的大小是21×10,注意这里为了方便采用了map[y][x]
//map[0]无意义，专门用来判断game over
reg [2:0] map [20:0] [9:0];
initial begin
    for(integer i = 20; i > 0; i = i - 1) 
        for(integer j = 9; j >= 0; j = j - 1)
            map[i][j] = 3'd0;
end

always @(posedge CLK_25M) begin
    if(key_start == 1'b1)
        Start = 1'b1;
    if(key_pause == 1'b1 || Over == 1'b1) 
        Start = 1'b0;

    if(key_reset == 1'b1) begin
        Over = 1'b0;
        Start = 1'b0;
        Update = 1'b0;
        for(integer i = 20; i > 0; i = i - 1) 
            for(integer j = 9; j >= 0; j = j - 1)
                map[i][j] = 3'd0;
    end
end

always@(posedge CLK_25M) begin
    if(Start == 1'b1) begin
        if(Update == 1'b1) begin //更新当前方块到map中
            if(cur_coordY[0] == 1'b0 || cur_coordY[1] == 1'b0 
            || cur_coordY[2] == 1'b0 || cur_coordY[3] == 1'b0) 
                Over <= 1'b1;
            else begin
                map[cur_coordY[0]][cur_coordX[0]] = cur_type;
                map[cur_coordY[1]][cur_coordX[1]] = cur_type;
                map[cur_coordY[2]][cur_coordX[2]] = cur_type;
                map[cur_coordY[3]][cur_coordX[3]] = cur_type;

                for (integer i = 20; i > 0; i = i - 1) begin
                    integer flag = 1'b1;
                    for(integer j = 9; j >= 0; j = j - 1) begin
                        if(map[i][j] == 3'd0) begin
                            flag = 1'b0;
                            break;
                        end
                    end
                    if(flag == 1'b1) begin
                        for(integer j = i; j > 1; j = j - 1)
                            map[j] <= map[j - 1];
                        i = i + 1;
                    end
                end
            end
        end
    end
end

always@(posedge CLK_25M) begin
    Update <= 1'b0;
    if(Start == 1'b1) begin
        if(CLK_1 == 1'b1) begin
            for(integer i = 0; i < 4; i = i + 1) begin
                if(cur_coordY[i] == 5'd20 || map[cur_coordY[i] + 1][cur_coordX[i]] > 3'd0) begin
                    Update <= 1'b1;
                    break;
                end
            end
        end
    end
end

always@(posedge CLK_25M) begin
	IsMap <= 3'd0;
    for (i = 1; i < 21; i = i + 1) begin
        for (j = 0; j < 10; j = j + 1) begin
            if((map[i][j] > 3'd0) && 
			(X > `WallX + (1 + j) * `BLOCK_SIZEX && X < `WallX + (2 + j) * `BLOCK_SIZEX) && 
			(Y > `WallY + (1 + i) * `BLOCK_SIZEY && Y < `WallY + (2 + i) * `BLOCK_SIZEY)) begin
					IsMap <= map[i][j];
                    break;
            end
        end
    end
end

endmodule